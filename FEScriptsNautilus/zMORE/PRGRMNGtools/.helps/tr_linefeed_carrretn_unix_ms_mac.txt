***************************************************************************
             CONVERSION TECHNIQUES AMONG TEXT FILES OF TYPE

                     Unix or Microsoft or Apple-Mac

                                                     Assembled: 2004 mar 26
                                                       Updated: 2004 mar 01
                                                Format changed: 2010 aug 26

                           in file  tr_linefeed_carrretn_unix_ms_mac.hlp
                           in dir   .../nautilus-scripts/PRGRMNGtools/.helps
***************************************************************************

TABLE OF CONTENTS

- Introduction
- Conversion types -- with sample Unix commands to perform the conversions
    -   unix2ms
    -   ms2unix
    -   unix2mac
    -   mac2unix
    -   mac2ms
    -   ms2mac
    -   unix2doublespace

APPENDIX A: ASCII code tables  (from 'man ascii')

APPENDIX B: The 'to_unix' script  (from SGI-IRIX)

APPENDIX C: The 'to_dos' script   (from SGI-IRIX)


								Page 2

************ 
INTRODUCTION:
************ 

Dealing with (ASCII) TEXT files transferred between Unix, Microsoft, and Mac
operating systems is problematic.  And the problem mainly lies
in dealing with normally-unseen carriage-return (CR) characters and
line-feed (LF) characters, at the ends of lines.

NOTE:
   Lines in Microsoft text files  end with  BOTH 'CR' & 'LF'.
   Lines in Unix      text files  end with  'LF'  ONLY.
   Lines in Mac       text files  end with  'CR' ONLY.

----

The following sections describe brief one or two line 'snippets' of
Unix shell programming code that perform the following translation types:

     unix2ms, ms2unix, unix2mac, mac2unix, mac2ms, ms2mac

and anther special translation type:

     unix2doublespace

----

Before showing those code 'snippets', it is helpful to know
the ASCII 8-bit codes --- in decimal, octal, and hexadecimal form
--- for a few characters:

The 8-bit code for 
an ASCII *CARRIAGE-RETURN* (abbreviation: 'cr') (a.k.a. 'Control M') is

            13    (in decimal)
            \015  (in octal)
            x'0D' (in hexadecimal)

The 8-bit code for 
an ASCII *LINE-FEED* ('lf' or new-line or 'nl') is

            10    (in decimal)
            \012  (in octal)
            x'0A' (in hexadecimal)

The 8-bit code for 
an ASCII *'sub'* character (a.k.a. 'Control Z')  is

            26    (in decimal)
            \032  (in octal)
            x'1A' (in hexadecimal)

The 8-bit code for 
an ASCII *FORM-FEED*  ('ff' or new-page or 'np') is

            12    (in decimal)
            \014  (in octal)
            x'0C' (in hexadecimal)

The Form-Feed code is not really used in the code examples in this document,
but it is important in printing applications --- to make sure that the last
page of a document is forced to print, rather than left in the
print buffer, to be overlaid by the next print job.

The Form-Feed code actually is in this document, indicating the start
of each new-page.  It shows as '\f' in a Tcl-Tk window.  

By the way, the Carriage-Return character shows as '\r' in a Tcl-Tk window,
on Unix.

In Appendix A, there is a table of ASCII characters and their corresponding
decimal, octal, and hexadecimal codes.




								Page 3
******************
* Conversion types -- with sample Unix commands to perform the conversions
******************


@@@@@@@@@@
@@ unix2ms - Basically, add carriage-return at line-feeds.
@@@@@@@@@@



   ##########################################
   ## Store carriage-return code in var 'cr'.
   ## See 'man echo' and 'man sed'.
   ## Use 'sed' to add a 'cr' at end of lines.
   ##########################################

   cr=`echo '\015'`
   sed "s/$/$cr/g"  $FILEIN > $FILEOUT

   ########################################
   ## You could use unix 'to_dos' command,
   ## if available.
   ##
   ## 'to_dos' is a script that uses
   ##      nawk '{printf("%s\r\n", $0);}'
   ## which appends "^M at the end of each line"
   ## where ^M = control-shift-m denotes a
   ## carriage-return.
   ##
   ##-------------------------------------
   ##
   ## 'to_dos' also uses
   ##      echo '\c' >> 
   ## to append "^Z at the end of the file".
   ##
   ## This echo "Sticks on the EOF character".
   ##
   ## The echo string contains '\032', the
   ## ASCII 'sub' character, before the '\c'.
   ##
   ## The '\c' at the end of an 'echo' string
   ## causes a line print without a new-line.
   ##
   ##-------------------------------------
   ##
   ## The simple 'sed' technique above does not
   ## add an EOF character at end of file.
   ## If such a file causes a problem when used
   ## in an MS application, one could try adding
   ## the EOF character.  See the 'to_dos' code
   ## in Appendix C.
   ########################################
   ## NOTE: In the 'nawk' the carriage-return
   ##       goes BEFORE the line-feed.
   ########################################
   ## References:  TRY www.google.com on 
   ## +sed +echo +"carriage return" +"new line"
   ########################################


@@@@@@@@@@
@@ ms2unix - Basically, remove carriage-returns (preferably at line-feeds only).
@@@@@@@@@@

   ########################################
   ## Remove carriage-returns everywhere.
   ## (They are almost always just at linefeeds.
   ##  If this does not work in some cases,
   ##  could try a 'sed' formulation.)
   ########################################

   tr -d '\015' < $FILEIN  > $FILEOUT

   ########################################
   ## You could use unix 'to_unix' command,
   ## if available.
   ##
   ## 'to_unix' is actually a script that uses 
   ##       tr -d '\015\032'
   ## to strip out "all carriage-returns and ctrl-Z's".
   ##
   ## See the 'to_unix' code in Appendix B.
   ########################################



								Page 4


@@@@@@@@@@@
@@ unix2mac - Change linefeeds to carr-retns.
@@@@@@@@@@@

   ########################################
   ## Change linefeeds to carr-retns.
   ########################################

   tr  '\012'  '\015'  < $FILEIN  > $FILEOUT



@@@@@@@@@@@
@@ mac2unix - Change carr-retns to linefeeds.
@@@@@@@@@@@


   ########################################
   ## Change carr-retns to linefeeds.
   ########################################

   tr  '\015'  '\012'  < $FILEIN  > $FILEOUT



@@@@@@@@@
@@ mac2ms - Change carr-retns to linefeed-plus-carr-retn.
@@@@@@@@@

   ##########################################
   ## USE 'mac2unix', then 'unix2ms', methods.
   ##########################################

   cr=`echo '\015'`
   tr  '\015'  '\012' < $FILEIN  | sed "s/$/$cr/g"  > $FILEOUT



@@@@@@@@@
@@ ms2mac - Remove line-feeds (preferably at carr-retns.)
@@@@@@@@@

   ########################################
   ## Remove line-feeds everywhere.
   ## (They are almost always just at carr-retns.
   ##  If this does not work in some cases,
   ##  could try a 'sed' formulation.)
   ########################################
   tr -d '\012' < $FILEIN  > $FILEOUT



@@@@@@@@@@@@@@@@@@
@@ unixdoublespace -  Add a linefeed at linefeeds.
@@@@@@@@@@@@@@@@@@


   ########################################
   ## Add linefeed at linefeeds.
   ########################################
   ## A linefeed was entered just after the
   ## back-slash.  That is why the rest of the
   ## 'sed' command is on the next line.
   ########################################

   sed 's/$/\
/'  $FILEIN > $FILEOUT



								Page A.1

***************************************************
* APPENDIX A: ASCII code tables  (from 'man ascii')
***************************************************


The ASCII character set is defined by a 1-to-1 mapping of characters to 8-bit
values.

The 8-bit values are not shown here.  But their Decimal, Hexadecimal, and
Octal representations are.


Here are mappings of the ASCII character set:

     - Decimal      to  the Character abbreviation (or the way it displays)
     - Hexadecimal  to  the Character abbreviation (or the way it displays)
     - Octal        to  the Character abbreviation (or the way it displays)


     decimal:
     |	0 nul |	 1 soh |  2 stx	|  3 etx |  4 eot |  5 enq |  6	ack |  7 bel |
     |	8 bs  |	 9 ht  | 10 nl	| 11 vt	 | 12 np  | 13 cr  | 14	so  | 15 si  |
     | 16 dle |	17 dc1 | 18 dc2	| 19 dc3 | 20 dc4 | 21 nak | 22	syn | 23 etb |
     | 24 can |	25 em  | 26 sub	| 27 esc | 28 fs  | 29 gs  | 30	rs  | 31 us  |
     | 32 sp  |	33 !   | 34 "	| 35 #	 | 36 $	  | 37 %   | 38	&   | 39 '   |
     | 40 (   |	41 )   | 42 *	| 43 +	 | 44 ,	  | 45 -   | 46	.   | 47 /   |
     | 48 0   |	49 1   | 50 2	| 51 3	 | 52 4	  | 53 5   | 54	6   | 55 7   |
     | 56 8   |	57 9   | 58 :	| 59 ;	 | 60 <	  | 61 =   | 62	>   | 63 ?   |
     | 64 @   |	65 A   | 66 B	| 67 C	 | 68 D	  | 69 E   | 70	F   | 71 G   |
     | 72 H   |	73 I   | 74 J	| 75 K	 | 76 L	  | 77 M   | 78	N   | 79 O   |
     | 80 P   |	81 Q   | 82 R	| 83 S	 | 84 T	  | 85 U   | 86	V   | 87 W   |
     | 88 X   |	89 Y   | 90 Z	| 91 [	 | 92 \	  | 93 ]   | 94	^   | 95 _   |
     | 96 `   |	97 a   | 98 b	| 99 c	 |100 d	  |101 e   |102	f   |103 g   |
     |104 h   |105 i   |106 j	|107 k	 |108 l	  |109 m   |110	n   |111 o   |
     |112 p   |113 q   |114 r	|115 s	 |116 t	  |117 u   |118	v   |119 w   |
     |120 x   |121 y   |122 z	|123 {	 |124 |	  |125 }   |126	~   |127 del |

     hexadecimal:
     | 00 nul |	01 soh | 02 stx	| 03 etx | 04 eot | 05 enq | 06	ack | 07 bel |
     | 08 bs  |	09 ht  | 0a nl	| 0b vt	 | 0c np  | 0d cr  | 0e	so  | 0f si  |
     | 10 dle |	11 dc1 | 12 dc2	| 13 dc3 | 14 dc4 | 15 nak | 16	syn | 17 etb |
     | 18 can |	19 em  | 1a sub	| 1b esc | 1c fs  | 1d gs  | 1e	rs  | 1f us  |
     | 20 sp  |	21 !   | 22 "	| 23 #	 | 24 $	  | 25 %   | 26	&   | 27 '   |
     | 28 (   |	29 )   | 2a *	| 2b +	 | 2c ,	  | 2d -   | 2e	.   | 2f /   |
     | 30 0   |	31 1   | 32 2	| 33 3	 | 34 4	  | 35 5   | 36	6   | 37 7   |
     | 38 8   |	39 9   | 3a :	| 3b ;	 | 3c <	  | 3d =   | 3e	>   | 3f ?   |
     | 40 @   |	41 A   | 42 B	| 43 C	 | 44 D	  | 45 E   | 46	F   | 47 G   |
     | 48 H   |	49 I   | 4a J	| 4b K	 | 4c L	  | 4d M   | 4e	N   | 4f O   |
     | 50 P   |	51 Q   | 52 R	| 53 S	 | 54 T	  | 55 U   | 56	V   | 57 W   |
     | 58 X   |	59 Y   | 5a Z	| 5b [	 | 5c \	  | 5d ]   | 5e	^   | 5f _   |
     | 60 `   |	61 a   | 62 b	| 63 c	 | 64 d	  | 65 e   | 66	f   | 67 g   |
     | 68 h   |	69 i   | 6a j	| 6b k	 | 6c l	  | 6d m   | 6e	n   | 6f o   |
     | 70 p   |	71 q   | 72 r	| 73 s	 | 74 t	  | 75 u   | 76	v   | 77 w   |
     | 78 x   |	79 y   | 7a z	| 7b {	 | 7c |	  | 7d }   | 7e	~   | 7f del |

     octal:
     |000 nul |001 soh |002 stx	|003 etx |004 eot |005 enq |006	ack |007 bel |
     |010 bs  |011 ht  |012 nl	|013 vt	 |014 np  |015 cr  |016	so  |017 si  |
     |020 dle |021 dc1 |022 dc2	|023 dc3 |024 dc4 |025 nak |026	syn |027 etb |
     |030 can |031 em  |032 sub	|033 esc |034 fs  |035 gs  |036	rs  |037 us  |
     |040 sp  |041 !   |042 "	|043 #	 |044 $	  |045 %   |046	&   |047 '   |
     |050 (   |051 )   |052 *	|053 +	 |054 ,	  |055 -   |056	.   |057 /   |
     |060 0   |061 1   |062 2	|063 3	 |064 4	  |065 5   |066	6   |067 7   |
     |070 8   |071 9   |072 :	|073 ;	 |074 <	  |075 =   |076	>   |077 ?   |
     |100 @   |101 A   |102 B	|103 C	 |104 D	  |105 E   |106	F   |107 G   |
     |110 H   |111 I   |112 J	|113 K	 |114 L	  |115 M   |116	N   |117 O   |
     |120 P   |121 Q   |122 R	|123 S	 |124 T	  |125 U   |126	V   |127 W   |
     |130 X   |131 Y   |132 Z	|133 [	 |134 \	  |135 ]   |136	^   |137 _   |
     |140 `   |141 a   |142 b	|143 c	 |144 d	  |145 e   |146	f   |147 g   |
     |150 h   |151 i   |152 j	|153 k	 |154 l	  |155 m   |156	n   |157 o   |
     |160 p   |161 q   |162 r	|163 s	 |164 t	  |165 u   |166	v   |167 w   |
     |170 x   |171 y   |172 z	|173 {	 |174 |	  |175 }   |176	~   |177 del |



								Page B.1

***************************************************
* APPENDIX B: The 'to_unix' script  (from SGI-IRIX)
***************************************************

#! /bin/sh -e
#Tag 1538
#
# convert a DOS ASCII file to a UNIX ASCII file by removing trailing ^M at the
# end of each line and ^Z at the end of the file

TMPFILE=/tmp/to_unix$$

if [ $# -gt 2 ]
then
	echo "usage: to_unix [<dos_file> [<unix_file>]]"
	exit 1
fi

# First strip out all carriage-return and ctrl-Z's
if [ $# -gt 0 ]
then
	tr -d '\015\032' < "$1" > $TMPFILE
else
	tr -d '\015\032' > $TMPFILE
fi


if [ $# -eq 2 ]
then
	mv -f $TMPFILE "$2"
else
	cat $TMPFILE
	rm $TMPFILE
fi




								Page C.1

***************************************************
* APPENDIX C: The 'to_dos' script   (from SGI-IRIX)
***************************************************

#! /bin/sh -e
#Tag 1538
#
# convert a UNIX ASCII file to a DOS ASCII file by appending ^M at the
# end of each line and ^Z at the end of the file

TMPFILE=/tmp/to_dos$$

if [ $# -gt 2 ]
then
	echo "usage: to_dos [<unix_file> [<dos_file>]]"
	exit 1
fi


if [ $# -gt 0 ]
then
	nawk '{printf("%s\r\n", $0);}' "$1" > $TMPFILE
else
	nawk '{printf("%s\r\n", $0);}' > $TMPFILE
fi

# Stick on the EOF character
echo '\c' >> $TMPFILE

if [ $# -eq 2 ]
then
	mv -f $TMPFILE "$2"
else
	cat $TMPFILE
	rm $TMPFILE
fi




********************************************************
** END OF description of Text-File conversion techniques
********************************************************

